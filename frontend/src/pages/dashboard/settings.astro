---
import Breadcrumb from "@components/dashboard/Breadcrumb";
import SettingCard from "@components/dashboard/SettingCard.astro";
import Input from "@components/ui/Input.astro";
import DashboardLayout from "@layouts/DashboardLayout.astro";
---

<DashboardLayout>
	<div class="max-w-4xl text-3xl font-bold mt-4 mx-auto md:mt-6 mb-4 px-4 md:px-0">
		<Breadcrumb 
			client:load  
			elements={[
				{ href: "/dashboard", name: "Dashboard" },
				{ href: "/dashboard/settings", name: "Settings" }
			]}	
		/>
	</div>
	<section class="max-w-3xl mx-auto pb-12">
		<h2 class="text-2xl font-bold ml-6">AI Settings</h2>
		<div class="grid gap-6 px-6 pt-6">
			<SettingCard
				id="type"
				title="IA type"
				description="select if you want to use an ollama or openai"
				notice="if you select OpenAI, you need to set your openai token every time you go to the editor (this is for security reasons)"
				action="/api/profile"
			>
				<select
					name="setting"
					class="setting-field w-full p-2 border border-paragraph rounded-md"
				>
					<option value="ollama">Ollama</option>
					<option value="openai">OpenAI</option>
				</select>
			</SettingCard>
			<SettingCard
				id="ollamaModel"
				title="Ollama AI name"
				description="update your Ollama AI settings"
				notice="this is obligatory if you want to use Ollama, you can change the model you want to use"
				action="/api/profile"
			>
				<Input name="setting" class="setting-field" />
			</SettingCard>
		</div>
	</section>
	<section class="max-w-3xl mx-auto pb-12">
		<h2 class="text-2xl font-bold ml-6">Preferences Settings</h2>
		<div class="grid gap-6 px-6 pt-6">
			<SettingCard
				id="defaultEditorMode"
				title="Default editor mode"
				description="select the default editor mode"
				notice="this will be the default editor mode when you open the function editor"
				action="/api/profile"
			>
				<select
					name="setting"
					class="setting-field w-full p-2 border border-paragraph rounded-md"
				>
					<option value="chat">Chat</option>
					<option value="editor">Editor</option>
				</select>
			</SettingCard>
			<SettingCard
				id="askBeforeLeaving"
				title="Ask before exit"
				description="select if you want to ask before exit the editor"
				notice="this will ask you before you leave the editor"
				action="/api/profile"
			>
				<select
					name="setting"
					class="setting-field bool-field w-full p-2 border border-paragraph rounded-md"
				>
					<option value="true">Yes</option>
					<option value="false">No</option>
				</select>
			</SettingCard>
			<SettingCard
				id="askToDeploy"
				title="Ask before deploy"
				description="select if you want to ask before deploy the function"
				notice="this will ask you before you deploy the function"
				action="/api/profile"
			>
				<select
					name="setting"
					class="setting-field bool-field w-full p-2 border border-paragraph rounded-md"
				>
					<option value="true">Yes</option>
					<option value="false">No</option>
				</select>
			</SettingCard>
		</div>
	</section>
</DashboardLayout>

<script>
	import { Settings } from "@lib/settings";
import toast from "@lib/toast";

	const $forms = document.querySelectorAll("form");

	$forms.forEach(($form) => {
		const $field = $form.querySelector('.setting-field') as HTMLInputElement;

		const value = Settings.settings[$form.id as keyof typeof Settings.settings];

		if (typeof value === "boolean") {
			$field.value = value ? "true" : "false";
		} else {
			$field.value = value;
		}

		$form.addEventListener("submit", async (e) => {
			e.preventDefault();
			const fieldId = $form.id as keyof typeof Settings.settings;

			if ($field.classList.contains("bool-field")) {
				const value = $field.value === "true";
				Settings.saveKey(fieldId, value);
			} else {
				Settings.saveKey(fieldId, $field.value);
			}
			
			toast({ title: "Settings saved", message: "Your settings have been saved" });
		});
	});
</script>
