---
import Button from "../ui/Button.astro";
---

<script>
  import { streamText, type CoreMessage } from 'ai'
  import { ollama } from 'ollama-ai-provider'
  import showdown from 'showdown'

  const AI_SYSTEM_PROMPT = `
    You specialize in writing JavaScript functions for a serverless AI-driven service. Follow these guidelines:

    1. Functions must always be named "handler".
    2. Functions must be asynchronous.
    3. Do not include comments or explanations unless requested,.never!
    4. Respond only to function-related requests.
    5. Functions can receive only one parameter (use objects for multiple parameters).
    6. Provide only updated code for corrections or modifications.
    7. Keep explanations short and direct.
    8. Answer all function-related questions.
    9. In a pure vanilla V8 environment, you do not have access to APIs like fetch or XMLHttpRequest, as 
    these are specific to browser or server environments with additional support.

    Example format:

    "
      async function handler(params) {
        return params.a + params.b;
      }
    "
  `

  const converter = new showdown.Converter()

  class Chat extends HTMLElement {

    disabled = false
    messages = [] as unknown as CoreMessage[]

    constructor() {
      super()
    }

    connectedCallback() {
      const $form = this.querySelector('form#message-form') as HTMLFormElement

      $form?.addEventListener('submit', (e) => {
        e.preventDefault()
        if (!e.target || this.disabled) return

        const form = new FormData(e.target as HTMLFormElement)
        const message = form.get('message') as string

        this.sendMessage(message)
        $form.reset()
      })
    }

    setDisable(status: boolean) {
      const $button = this.querySelector('button') as HTMLButtonElement
      
      if (!$button) return

      this.disabled = status
      $button.disabled = this.disabled
    }

    sendMessage(message: string) {
      const messageContent: CoreMessage = { role: 'user', content: message }

      this.messages.push(messageContent)

      const $messageBox = this.querySelector('#message-box')

      if (!$messageBox) return

      const $message = document.createElement('div')
      $message.className = `message-${messageContent.role}`
      $message.textContent = messageContent.content as string

      $messageBox.appendChild($message)

      this.setDisable(true)
      this.aiResponse()
        .finally(() => this.setDisable(false))
    }

    async aiResponse() {
      const result = await streamText({
        model: ollama('phi3'),
        system: AI_SYSTEM_PROMPT,
        messages: this.messages
      })

      const $messageBox = this.querySelector('#message-box')
      const $message = document.createElement('div')
      $message.className = `message-assistant`

      $messageBox?.appendChild($message)

      for await (const part of result.textStream) {
        $message.textContent += part
      }

      const content = $message.textContent ?? ""
      const html = converter.makeHtml(content)

      $message.setHTMLUnsafe(html)
      $message.querySelectorAll('pre code').forEach((block) => {
        // @ts-ignore
        hljs.highlightBlock(block)
      })

      this.messages.push({ role: 'assistant', content })
    }
  }

  customElements.define('chat-box', Chat)
</script>

<chat-box class="flex flex-col items-center h-full gap-1 text-black overflow-hidden">
  <div id="message-box" class="overflow-y-auto flex-1 flex flex-col gap-2.5 pr-0.5 w-full"></div>
  <form id="message-form" class="flex gap-1 md:w-5/6">
    <input 
      name="message" 
      type="text" 
      class="items-center gap-1 rounded-sm border border-paragraph p-2 mr-1 h-fit w-full"
    />
    <Button style="pri" class="px-2">Send</Button>
  </form>
</chat-box>

<style is:global>
  .message-user, .message-assistant {
    background-color: #f3f4f6;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    width: max-content;
    max-width: 80%;
    word-wrap: break-word;
  }

  .message-user {
    align-self: flex-end;
    border-end-end-radius: 0rem;
  }

  .message-assistant {
    align-self: flex-start;
    border-end-start-radius: 0rem;
  }

  pre {
    background-color: #0f0e17;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    margin: 0.5rem 0;
    overflow-x: auto
  }
</style>